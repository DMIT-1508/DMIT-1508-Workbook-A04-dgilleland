--View Exercise
USE [A04-2023-School]
GO

-- Database tables are all about storing information.
-- SELECT statements are all about retrieving information from our database.
-- SELECT statements produce a "tabular" result set: the results "look like" a table.
-- A View is simply a stored SELECT statement that produces a tabluar result.
-- The View does not directly store information (that's done by our tables).
-- Rather, the View "extracts" data from the tables by using a SELECT statement under the hood.

--1.  Create a view of staff full names called StaffList.
DROP VIEW IF EXISTS StaffList
GO
-- Creating a view should appear as its own "batch" statement
-- (i.e.: remember to use the GO statement after creating the view)
CREATE VIEW StaffList
AS
    SELECT  FirstName + ' ' + LastName AS 'StaffFullName'
    FROM    Staff
GO
-- Now we can use the StaffList view as if it were a table
SELECT  StaffFullName
FROM    StaffList
-- SP_HELP Staff
-- SP_HELPTEXT StaffList    -- Gets the text of the View
-- SP_HELP StaffList        -- Gets schema info on the View
GO
--2.  Create a view of staff ID's, full names, positionID's and datehired called StaffConfidential.
DROP VIEW IF EXISTS StaffConfidential
GO
CREATE VIEW StaffConfidential
AS
    SELECT  StaffID,
            FirstName + ' ' + LastName AS 'FullName',
            PositionID,
            DateHired
    FROM    Staff
GO
-- I can use it accordingly:
SELECT  FullName, DateHired
FROM    StaffConfidential
GO
--2a. Alter the StaffConfidential view so that it includes the position name.
--    The ALTER VIEW statement presumes that the view already exists
ALTER VIEW StaffConfidential
AS
    SELECT  StaffID,
            FirstName + ' ' + LastName AS 'FullName',
            P.PositionID,
            PositionDescription AS 'PositionName',
            DateHired
    FROM    Staff AS S
        INNER JOIN Position AS P ON S.PositionID = P.PositionID
GO

-- Use the new view to get the names and positions of the staff members
SELECT  FullName, PositionName, PositionID
FROM    StaffConfidential
GO

--3.  Create a view called StaffExperience that returns the name of the staff members that have taught courses and the names of the courses they have taught. Sort the results by staff last name then first name, then course name.
--    Note: The CREATE OR ALTER VIEW is an alternative to using the
--          DROP VIEW IF EXISTS statement followed by a CREATE VIEW statement
CREATE OR ALTER VIEW StaffExperienceRaw
AS
    -- 
    SELECT  FirstName + ' ' + LastName as 'StaffName',
            CourseName
    FROM    Staff AS S
        INNER JOIN Registration AS R ON S.StaffID = R.StaffID
        INNER JOIN Course AS C ON R.CourseId = C.CourseId
    ORDER BY LastName, FirstName, CourseName
        -- To learn more about OFFSET, see the following article
        -- https://www.essentialsql.com/using-offset-and-fetch-with-the-order-by-clause/
        -- "The OFFSET is the number of rows to skip before including them in the result."
        OFFSET 0 ROWS
GO

-- Let's use the previous view as the "source" for this view's query
DROP VIEW IF EXISTS StaffExperience
GO
CREATE VIEW StaffExperience
AS
    SELECT  StaffName, CourseName
    FROM    StaffExperienceRaw -- <== This is another view
    GROUP BY StaffName, CourseName -- Using this to remove duplicates
GO

-- Now, let's use the StaffExperience view in a query
SELECT StaffName, CourseName FROM StaffExperience

--4.  Create a view called StudentGrades that retrieves the student ID's, full names, courseId's, course names, and marks for each student.
-- TODO: Student Answer here

/* *******************
 * Using the Views
 *  If an operation fails write a brief explanation why.
 *  Do not just quote the error message generated by the server!
 */

--5.  Use the student grades view to create a grade report for studentID 199899200 that shows the students ID, full name, course names and marks.
-- TODO: Student Answer here

--6.  Select the same information using the student grades view for studentID 199912010.
-- TODO: Student Answer here

--7.  Retrieve the course id for the student grades view from the database.
-- TODO: Student Answer here

